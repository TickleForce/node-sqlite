{"version":3,"file":"main.js","sources":["../src/utils.js","../src/Statement.js","../src/Database.js","../src/main.js"],"sourcesContent":["/**\n * SQLite client library for Node.js applications\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction prepareParams(args, { offset = 0, excludeLastArg = false } = {}) {\n  const hasOneParam = (args.length === (offset + 1 + (excludeLastArg ? 1 : 0)));\n  if (hasOneParam) {\n    return args[offset];\n  }\n  return Array.prototype.slice.call(args, offset, args.length - (excludeLastArg ? 1 : 0));\n}\n\nexport default prepareParams;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport prepareParams from './utils';\n\nclass Statement {\n\n  constructor(stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  get sql() {\n    return this.stmt.sql;\n  }\n\n  get lastID() {\n    return this.stmt.lastID;\n  }\n\n  get changes() {\n    return this.stmt.changes;\n  }\n\n  bind() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset() {\n    return new this.Promise((resolve) => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize() {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  each() {\n    const params = prepareParams(arguments, { excludeLastArg: true });\n    const callback = arguments[arguments.length - 1];\n    return new this.Promise((resolve, reject) => {\n      this.stmt.each(params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport Statement from './Statement';\nimport prepareParams from './utils';\n\nclass Database {\n\n  /**\n   * Initializes a new instance of the database client.\n   * @param driver An instance of SQLite3 driver library.\n   * @param promiseLibrary ES6 Promise library to use.\n     */\n  constructor(driver, { Promise }) {\n    this.driver = driver;\n    this.Promise = Promise;\n  }\n\n  /**\n   * Close the database.\n   */\n  close() {\n    return new this.Promise((resolve, reject) => {\n      this.driver.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run(sql) {\n    const params = prepareParams(arguments, { offset: 1 });\n    const Promise = this.Promise;\n    return new Promise((resolve, reject) => {\n      this.driver.run(sql, params, function runExecResult(err) {\n        if (err) {\n          reject(err);\n        } else {\n          // Per https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n          // when run() succeeds, the `this' object is a driver statement object. Wrap it as a\n          // Statement.\n          resolve(new Statement(this, Promise));\n        }\n      });\n    });\n  }\n\n  get(sql) {\n    const params = prepareParams(arguments, { offset: 1 });\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all(sql) {\n    const params = prepareParams(arguments, { offset: 1 });\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec(sql) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each(sql) {\n    const params = prepareParams(arguments, { offset: 1, excludeLastArg: true });\n    const callback = arguments[arguments.length - 1];\n    return new this.Promise((resolve, reject) => {\n      this.driver.each(sql, params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n  prepare(sql) {\n    const params = prepareParams(arguments, { offset: 1 });\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  async migrate({ force, table = 'migrations', migrationsPath = './migrations', output = false } = {}) {\n    /* eslint-disable no-await-in-loop */\n    const location = path.resolve(migrationsPath);\n\n    // Get the list of migration files, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n    const migrations = await new this.Promise((resolve, reject) => {\n      fs.readdir(location, (err, files) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(files\n            .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n            .filter(x => x !== null)\n            .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n            .sort((a, b) => Math.sign(a.id - b.id)));\n        }\n      });\n    });\n\n    if (!migrations.length) {\n      throw new Error(`No migration files found in '${location}`);\n    } else if (output) {\n      console.log('Checking migrations...');\n    }\n\n    // Ge the list of migrations, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n    await Promise.all(migrations.map(migration => new this.Promise((resolve, reject) => {\n      const filename = path.join(location, migration.filename);\n      fs.readFile(filename, 'utf-8', (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          const [up, down] = data.split(/^--\\s+?down/mi);\n          if (!down) {\n            const message = `The ${migration.filename} file does not contain '-- Down' separator.`;\n            reject(new Error(message));\n          } else {\n            /* eslint-disable no-param-reassign */\n            migration.up = up.replace(/^--.*?$/gm, '').trim();     // Remove comments\n            migration.down = down.replace(/^--.*?$/gm, '').trim(); // and trim whitespaces\n            /* eslint-enable no-param-reassign */\n            resolve();\n          }\n        }\n      });\n    })));\n\n    // Create a database table for migrations meta data if it doesn't exist\n    await this.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`);\n\n    // Get the list of already applied migrations\n    let dbMigrations = await this.all(\n      `SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`,\n    );\n\n    // Undo migrations that exist only in the database but not in files,\n    // also undo the last migration if the `force` option was set to `last`.\n    const lastMigration = migrations[migrations.length - 1];\n    for (const migration of dbMigrations.slice().sort((a, b) => Math.sign(b.id - a.id))) {\n      if (!migrations.some(x => x.id === migration.id) ||\n        (force === 'last' && migration.id === lastMigration.id)) {\n        if (output) console.log('\\x1b[36m%s\\x1b[0m', '  Rolling back:', migration.name);\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.down);\n          await this.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n          await this.run('COMMIT');\n          dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Apply pending migrations\n    const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n    for (const migration of migrations) {\n      if (migration.id > lastMigrationId) {\n        if (output) console.log('\\x1b[36m%s\\x1b[0m', '  Applying migration:', migration.name);\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.up);\n          await this.run(\n            `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n            migration.id, migration.name, migration.up, migration.down,\n          );\n          await this.run('COMMIT');\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      }\n    }\n    if (output) console.log('  Migrations are up-to-date');\n\n    /* eslint-enable no-await-in-loop */\n    return this;\n  }\n}\n\nexport default Database;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport sqlite3 from 'sqlite3';\nimport Database from './Database';\n\nconst promise = global.Promise;\nconst db = new Database(null, { Promise: promise });\n\n/**\n * Opens SQLite database.\n *\n * @returns Promise<Database> A promise that resolves to an instance of SQLite database client.\n */\ndb.open = (filename, { mode = null, verbose = false, Promise = promise } = {}) => {\n  let driver;\n\n  if (verbose) {\n    sqlite3.verbose();\n  }\n\n  return new Promise((resolve, reject) => {\n    if (mode !== null) {\n      driver = new sqlite3.Database(filename, mode, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      driver = new sqlite3.Database(filename, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  }).then(() => {\n    db.driver = driver;\n    db.Promise = Promise;\n    return new Database(driver, { Promise });\n  });\n};\n\nexport default db;\n"],"names":["prepareParams","args","offset","excludeLastArg","hasOneParam","length","Array","prototype","slice","call","Statement","stmt","Promise","sql","lastID","changes","params","arguments","resolve","reject","bind","err","reset","finalize","run","get","row","all","rows","callback","each","rowsCount","Database","driver","close","runExecResult","exec","prepare","force","table","migrationsPath","output","location","path","migrations","readdir","files","map","x","match","filter","id","Number","name","filename","sort","a","b","Math","sign","Error","log","join","migration","readFile","data","up","down","split","message","replace","trim","dbMigrations","lastMigration","some","console","lastMigrationId","promise","global","db","open","mode","verbose","sqlite3","then"],"mappings":";;;;;;;;AAAA;;;;;;;AAOA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B,EAAEC,SAAS,CAAX,EAAcC,iBAAiB,KAA/B,KAAyC,EAAtE,EAA0E;QAClEC,cAAeH,KAAKI,MAAL,KAAiBH,SAAS,CAAT,IAAcC,iBAAiB,CAAjB,GAAqB,CAAnC,CAAtC;MACIC,WAAJ,EAAiB;WACRH,KAAKC,MAAL,CAAP;;SAEKI,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,IAA3B,EAAiCC,MAAjC,EAAyCD,KAAKI,MAAL,IAAeF,iBAAiB,CAAjB,GAAqB,CAApC,CAAzC,CAAP;CAGF;;ACfA;;;;;;;;;AASA,AAEA,MAAMO,SAAN,CAAgB;;cAEFC,IAAZ,EAAkBC,OAAlB,EAA2B;SACpBD,IAAL,GAAYA,IAAZ;SACKC,OAAL,GAAeA,OAAf;;;MAGEC,GAAJ,GAAU;WACD,KAAKF,IAAL,CAAUE,GAAjB;;;MAGEC,MAAJ,GAAa;WACJ,KAAKH,IAAL,CAAUG,MAAjB;;;MAGEC,OAAJ,GAAc;WACL,KAAKJ,IAAL,CAAUI,OAAjB;;;SAGK;UACCC,SAAShB,cAAciB,SAAd,CAAf;WACO,IAAI,KAAKL,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUS,IAAV,CAAeJ,MAAf,EAAwBK,GAAD,IAAS;YAC1BA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACG,IAAR;;OAJJ;KADK,CAAP;;;UAWM;WACC,IAAI,KAAKT,OAAT,CAAkBM,OAAD,IAAa;WAC9BP,IAAL,CAAUW,KAAV,CAAgB,MAAM;gBACZ,IAAR;OADF;KADK,CAAP;;;aAOS;WACF,IAAI,KAAKV,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUY,QAAV,CAAoBF,GAAD,IAAS;YACtBA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;;;OAHT;KADK,CAAP;;;QAWI;UACEL,SAAShB,cAAciB,SAAd,CAAf;WACO,IAAI,KAAKL,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUa,GAAV,CAAcR,MAAd,EAAuBK,GAAD,IAAS;YACzBA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACG,IAAR;;OAJJ;KADK,CAAP;;;QAWI;UACEL,SAAShB,cAAciB,SAAd,CAAf;WACO,IAAI,KAAKL,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUc,GAAV,CAAcT,MAAd,EAAsB,CAACK,GAAD,EAAMK,GAAN,KAAc;YAC9BL,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGK,GAAR;;OAJJ;KADK,CAAP;;;QAWI;UACEV,SAAShB,cAAciB,SAAd,CAAf;WACO,IAAI,KAAKL,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUgB,GAAV,CAAcX,MAAd,EAAsB,CAACK,GAAD,EAAMO,IAAN,KAAe;YAC/BP,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGO,IAAR;;OAJJ;KADK,CAAP;;;SAWK;UACCZ,SAAShB,cAAciB,SAAd,EAAyB,EAAEd,gBAAgB,IAAlB,EAAzB,CAAf;UACM0B,WAAWZ,UAAUA,UAAUZ,MAAV,GAAmB,CAA7B,CAAjB;WACO,IAAI,KAAKO,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCR,IAAL,CAAUmB,IAAV,CAAed,MAAf,EAAuBa,QAAvB,EAAiC,CAACR,GAAD,EAAMU,YAAY,CAAlB,KAAwB;YACnDV,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGU,SAAR;;OAJJ;KADK,CAAP;;;CAaJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtHA;;;;;;;;;AASA,AACA,AACA,AACA,AAEA,MAAMC,QAAN,CAAe;;;;;;;cAODC,MAAZ,EAAoB,EAAErB,OAAF,EAApB,EAAiC;SAC1BqB,MAAL,GAAcA,MAAd;SACKrB,OAAL,GAAeA,OAAf;;;;;;UAMM;WACC,IAAI,KAAKA,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCc,MAAL,CAAYC,KAAZ,CAAmBb,GAAD,IAAS;YACrBA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;;;OAHT;KADK,CAAP;;;MAWER,GAAJ,EAAS;UACDG,SAAShB,cAAciB,SAAd,EAAyB,EAAEf,QAAQ,CAAV,EAAzB,CAAf;UACMU,UAAU,KAAKA,OAArB;WACO,IAAIA,OAAJ,CAAY,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACjCc,MAAL,CAAYT,GAAZ,CAAgBX,GAAhB,EAAqBG,MAArB,EAA6B,SAASmB,aAAT,CAAuBd,GAAvB,EAA4B;YACnDA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;;;;kBAIG,IAAIX,SAAJ,CAAc,IAAd,EAAoBE,OAApB,CAAR;;OAPJ;KADK,CAAP;;;MAcEC,GAAJ,EAAS;UACDG,SAAShB,cAAciB,SAAd,EAAyB,EAAEf,QAAQ,CAAV,EAAzB,CAAf;WACO,IAAI,KAAKU,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCc,MAAL,CAAYR,GAAZ,CAAgBZ,GAAhB,EAAqBG,MAArB,EAA6B,CAACK,GAAD,EAAMK,GAAN,KAAc;YACrCL,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGK,GAAR;;OAJJ;KADK,CAAP;;;MAWEb,GAAJ,EAAS;UACDG,SAAShB,cAAciB,SAAd,EAAyB,EAAEf,QAAQ,CAAV,EAAzB,CAAf;WACO,IAAI,KAAKU,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCc,MAAL,CAAYN,GAAZ,CAAgBd,GAAhB,EAAqBG,MAArB,EAA6B,CAACK,GAAD,EAAMO,IAAN,KAAe;YACtCP,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGO,IAAR;;OAJJ;KADK,CAAP;;;;;;OAcGf,GAAL,EAAU;WACD,IAAI,KAAKD,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCc,MAAL,CAAYG,IAAZ,CAAiBvB,GAAjB,EAAuBQ,GAAD,IAAS;YACzBA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACG,IAAR;;OAJJ;KADK,CAAP;;;OAWGR,GAAL,EAAU;UACFG,SAAShB,cAAciB,SAAd,EAAyB,EAAEf,QAAQ,CAAV,EAAaC,gBAAgB,IAA7B,EAAzB,CAAf;UACM0B,WAAWZ,UAAUA,UAAUZ,MAAV,GAAmB,CAA7B,CAAjB;WACO,IAAI,KAAKO,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;WACtCc,MAAL,CAAYH,IAAZ,CAAiBjB,GAAjB,EAAsBG,MAAtB,EAA8Ba,QAA9B,EAAwC,CAACR,GAAD,EAAMU,YAAY,CAAlB,KAAwB;YAC1DV,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACGU,SAAR;;OAJJ;KADK,CAAP;;;UAWMlB,GAAR,EAAa;UACLG,SAAShB,cAAciB,SAAd,EAAyB,EAAEf,QAAQ,CAAV,EAAzB,CAAf;WACO,IAAI,KAAKU,OAAT,CAAiB,CAACM,OAAD,EAAUC,MAAV,KAAqB;YACrCR,OAAO,KAAKsB,MAAL,CAAYI,OAAZ,CAAoBxB,GAApB,EAAyBG,MAAzB,EAAkCK,GAAD,IAAS;YACjDA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;kBACG,IAAIX,SAAJ,CAAcC,IAAd,EAAoB,KAAKC,OAAzB,CAAR;;OAJS,CAAb;KADK,CAAP;;;;;;SAcF,CAAc,EAAE0B,KAAF,EAASC,QAAQ,YAAjB,EAA+BC,iBAAiB,cAAhD,EAAgEC,SAAS,KAAzE,KAAmF,EAAjG,EAAqG;;;;;YAE7FC,WAAWC,KAAKzB,OAAL,CAAasB,cAAb,CAAjB;;;;;YAKMI,aAAa,MAAM,IAAI,MAAKhC,OAAT,CAAiB,UAACM,OAAD,EAAUC,MAAV,EAAqB;WAC1D0B,OAAH,CAAWH,QAAX,EAAqB,UAACrB,GAAD,EAAMyB,KAAN,EAAgB;cAC/BzB,GAAJ,EAAS;mBACAA,GAAP;WADF,MAEO;oBACGyB,MACLC,GADK,CACD;qBAAKC,EAAEC,KAAF,CAAQ,oBAAR,CAAL;aADC,EAELC,MAFK,CAEE;qBAAKF,MAAM,IAAX;aAFF,EAGLD,GAHK,CAGD;qBAAM,EAAEI,IAAIC,OAAOJ,EAAE,CAAF,CAAP,CAAN,EAAoBK,MAAML,EAAE,CAAF,CAA1B,EAAgCM,UAAUN,EAAE,CAAF,CAA1C,EAAN;aAHC,EAILO,IAJK,CAIA,UAACC,CAAD,EAAIC,CAAJ;qBAAUC,KAAKC,IAAL,CAAUH,EAAEL,EAAF,GAAOM,EAAEN,EAAnB,CAAV;aAJA,CAAR;;SAJJ;OADuB,CAAzB;;UAcI,CAACP,WAAWvC,MAAhB,EAAwB;cAChB,IAAIuD,KAAJ,CAAW,gCAA+BlB,QAAS,EAAnD,CAAN;OADF,MAEO,IAAID,MAAJ,EAAY;gBACToB,GAAR,CAAY,wBAAZ;;;;;;YAMIjD,QAAQe,GAAR,CAAYiB,WAAWG,GAAX,CAAe;eAAa,IAAI,MAAKnC,OAAT,CAAiB,UAACM,OAAD,EAAUC,MAAV,EAAqB;gBAC5EmC,WAAWX,KAAKmB,IAAL,CAAUpB,QAAV,EAAoBqB,UAAUT,QAA9B,CAAjB;aACGU,QAAH,CAAYV,QAAZ,EAAsB,OAAtB,EAA+B,UAACjC,GAAD,EAAM4C,IAAN,EAAe;gBACxC5C,GAAJ,EAAS;qBACAA,GAAP;aADF,MAEO;oBACC,CAAC6C,EAAD,EAAKC,IAAL,IAAaF,KAAKG,KAAL,CAAW,eAAX,CAAnB;kBACI,CAACD,IAAL,EAAW;sBACHE,UAAW,OAAMN,UAAUT,QAAS,6CAA1C;uBACO,IAAIM,KAAJ,CAAUS,OAAV,CAAP;eAFF,MAGO;;0BAEKH,EAAV,GAAeA,GAAGI,OAAH,CAAW,WAAX,EAAwB,EAAxB,EAA4BC,IAA5B,EAAf,CAFK;0BAGKJ,IAAV,GAAiBA,KAAKG,OAAL,CAAa,WAAb,EAA0B,EAA1B,EAA8BC,IAA9B,EAAjB,CAHK;;;;;WARX;SAF4C,CAAb;OAAf,CAAZ,CAAN;;;YAsBM,MAAK/C,GAAL,CAAU,+BAA8Be,KAAM;;;;;EAA9C,CAAN;;;UAQIiC,eAAe,MAAM,MAAK7C,GAAL,CACtB,mCAAkCY,KAAM,mBADlB,CAAzB;;;;YAMMkC,gBAAgB7B,WAAWA,WAAWvC,MAAX,GAAoB,CAA/B,CAAtB;WACK,MAAM0D,SAAX,IAAwBS,aAAahE,KAAb,GAAqB+C,IAArB,CAA0B,UAACC,CAAD,EAAIC,CAAJ;eAAUC,KAAKC,IAAL,CAAUF,EAAEN,EAAF,GAAOK,EAAEL,EAAnB,CAAV;OAA1B,CAAxB,EAAqF;YAC/E,CAACP,WAAW8B,IAAX,CAAgB;iBAAK1B,EAAEG,EAAF,KAASY,UAAUZ,EAAxB;SAAhB,CAAD,IACDb,UAAU,MAAV,IAAoByB,UAAUZ,EAAV,KAAiBsB,cAActB,EADtD,EAC2D;cACrDV,MAAJ,EAAYkC,QAAQd,GAAR,CAAY,mBAAZ,EAAiC,iBAAjC,EAAoDE,UAAUV,IAA9D;gBACN,MAAK7B,GAAL,CAAS,OAAT,CAAN;cACI;kBACI,MAAKY,IAAL,CAAU2B,UAAUI,IAApB,CAAN;kBACM,MAAK3C,GAAL,CAAU,gBAAee,KAAM,gBAA/B,EAAgDwB,UAAUZ,EAA1D,CAAN;kBACM,MAAK3B,GAAL,CAAS,QAAT,CAAN;2BACegD,aAAatB,MAAb,CAAoB;qBAAKF,EAAEG,EAAF,KAASY,UAAUZ,EAAxB;aAApB,CAAf;WAJF,CAKE,OAAO9B,GAAP,EAAY;kBACN,MAAKG,GAAL,CAAS,UAAT,CAAN;kBACMH,GAAN;;SAXJ,MAaO;;;;;;YAMHuD,kBAAkBJ,aAAanE,MAAb,GAAsBmE,aAAaA,aAAanE,MAAb,GAAsB,CAAnC,EAAsC8C,EAA5D,GAAiE,CAAzF;WACK,MAAMY,SAAX,IAAwBnB,UAAxB,EAAoC;YAC9BmB,UAAUZ,EAAV,GAAeyB,eAAnB,EAAoC;cAC9BnC,MAAJ,EAAYkC,QAAQd,GAAR,CAAY,mBAAZ,EAAiC,uBAAjC,EAA0DE,UAAUV,IAApE;gBACN,MAAK7B,GAAL,CAAS,OAAT,CAAN;cACI;kBACI,MAAKY,IAAL,CAAU2B,UAAUG,EAApB,CAAN;kBACM,MAAK1C,GAAL,CACH,gBAAee,KAAM,4CADlB,EAEJwB,UAAUZ,EAFN,EAEUY,UAAUV,IAFpB,EAE0BU,UAAUG,EAFpC,EAEwCH,UAAUI,IAFlD,CAAN;kBAIM,MAAK3C,GAAL,CAAS,QAAT,CAAN;WANF,CAOE,OAAOH,GAAP,EAAY;kBACN,MAAKG,GAAL,CAAS,UAAT,CAAN;kBACMH,GAAN;;;;UAIFoB,MAAJ,EAAYkC,QAAQd,GAAR,CAAY,6BAAZ;;;;;;CAOhB;;ACjPA;;;;;;;;;AASA,AACA,AAEA,MAAMgB,UAAUC,OAAOlE,OAAvB;AACA,MAAMmE,KAAK,IAAI/C,QAAJ,CAAa,IAAb,EAAmB,EAAEpB,SAASiE,OAAX,EAAnB,CAAX;;;;;;;AAOAE,GAAGC,IAAH,GAAU,CAAC1B,QAAD,EAAW,EAAE2B,OAAO,IAAT,EAAeC,UAAU,KAAzB,EAAgCtE,UAAUiE,OAA1C,KAAsD,EAAjE,KAAwE;MAC5E5C,MAAJ;;MAEIiD,OAAJ,EAAa;YACHA,OAAR;;;SAGK,IAAItE,OAAJ,CAAY,CAACM,OAAD,EAAUC,MAAV,KAAqB;QAClC8D,SAAS,IAAb,EAAmB;eACR,IAAIE,QAAQnD,QAAZ,CAAqBsB,QAArB,EAA+B2B,IAA/B,EAAsC5D,GAAD,IAAS;YACjDA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;;;OAHA,CAAT;KADF,MAQO;eACI,IAAI8D,QAAQnD,QAAZ,CAAqBsB,QAArB,EAAgCjC,GAAD,IAAS;YAC3CA,GAAJ,EAAS;iBACAA,GAAP;SADF,MAEO;;;OAHA,CAAT;;GAVG,EAkBJ+D,IAlBI,CAkBC,MAAM;OACTnD,MAAH,GAAYA,MAAZ;OACGrB,OAAH,GAAaA,OAAb;WACO,IAAIoB,QAAJ,CAAaC,MAAb,EAAqB,EAAErB,OAAF,EAArB,CAAP;GArBK,CAAP;CAPF,CAgCA;;"}